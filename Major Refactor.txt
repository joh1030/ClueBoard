Before:

	for(int i = 0; i < numRows; i++) {
			for(int j = 0; j < numColumns; j++) {
				LinkedList<BoardCell> adjacents = new LinkedList<BoardCell>();
				//first ensure we are checking a doorway or walkway to start from
				if( getBoardCell(i,j).isRoom()) {
					adjLists.put(getBoardCell(i,j), adjacents);
				}
				if( getBoardCell(i, j).isWalkway() ) {
					if (i!=numRows-1) 
						if(getBoardCell(i+1, j).isWalkway() || (getBoardCell(i+1, j).isDoorway() && getRoomCell(i+1,j).getDoorDirection() == DoorDirection.UP)) adjacents.add(getBoardCell(i+1,j));
					if (j!=numColumns-1) if(getBoardCell(i, j+1).isWalkway() || (getBoardCell(i, j+1).isDoorway() && getRoomCell(i,j+1).getDoorDirection() == DoorDirection.LEFT)) adjacents.add(getBoardCell(i,j+1));
					if (i!=0) if(getBoardCell(i-1, j).isWalkway() || (getBoardCell(i-1, j).isDoorway() && getRoomCell(i-1,j).getDoorDirection() == DoorDirection.DOWN)) adjacents.add(getBoardCell(i-1,j));
					if (j!=0) if(getBoardCell(i, j-1).isWalkway() || (getBoardCell(i, j-1).isDoorway() && getRoomCell(i,j-1).getDoorDirection() == DoorDirection.RIGHT)) adjacents.add(getBoardCell(i,j-1));
					adjLists.put(getBoardCell(i,j), adjacents);
				}
				//if doorway, only one adjacency exists
				if( getBoardCell(i, j).isDoorway() ) {
					if (i!=numRows-1) if(getRoomCell(i, j).getDoorDirection() == DoorDirection.DOWN) adjacents.add(getBoardCell(i+1,j));
					if (j!=numColumns-1) if(getRoomCell(i, j).getDoorDirection() == DoorDirection.RIGHT) adjacents.add(getBoardCell(i,j+1));
					if (i!=0) if(getRoomCell(i, j).getDoorDirection() == DoorDirection.UP) adjacents.add(getBoardCell(i-1,j));
					if (j!=0) if(getRoomCell(i, j).getDoorDirection() == DoorDirection.LEFT) adjacents.add(getBoardCell(i,j-1));

					adjLists.put(getBoardCell(i,j), adjacents);
				}
			}
		}
		
		
After:
public void calcAdjacencies() {
		for(int i = 0; i < numRows; i++) {
			for(int j = 0; j < numColumns; j++) {
				LinkedList<BoardCell> adjacents = new LinkedList<BoardCell>();
				
				if( getBoardCell(i, j).isWalkway() ) {
					if ((i<numRows-1) && validAdjCell(i+1, j, DoorDirection.UP)) {
							adjacents.add(getBoardCell(i+1,j));
					}
					if ((j<numColumns-1) && validAdjCell(i, j+1, DoorDirection.LEFT))  {
							adjacents.add(getBoardCell(i,j+1));
					}
					if ((i>0) && validAdjCell(i-1, j, DoorDirection.DOWN)) {
							adjacents.add(getBoardCell(i-1,j));
					}
					if ((j>0) && validAdjCell(i, j-1, DoorDirection.RIGHT)) {
							adjacents.add(getBoardCell(i,j-1));
					}
				} else if( getBoardCell(i, j).isDoorway() ) {
					if ((i<numRows-1) && (getRoomCell(i, j).getDoorDirection() == DoorDirection.DOWN)) {
							adjacents.add(getBoardCell(i+1,j));
					}
					if ((j<numColumns-1) && (getRoomCell(i, j).getDoorDirection() == DoorDirection.RIGHT)) {
							adjacents.add(getBoardCell(i,j+1));
					}
					if ((i>0) && (getRoomCell(i, j).getDoorDirection() == DoorDirection.UP)) {
							adjacents.add(getBoardCell(i-1,j));
					}
					if ((j>0) && (getRoomCell(i, j).getDoorDirection() == DoorDirection.LEFT)) { 
							adjacents.add(getBoardCell(i,j-1));
					}
				}
				adjLists.put(getBoardCell(i,j), adjacents);
			}
		}
	}